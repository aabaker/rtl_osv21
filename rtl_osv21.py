#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script to record 433MHz dat in search of packets from Oregon Scientific weather sensors.
"""

import os
import sys
import time

from decoder import readRTLFile
from parser import parsePacketv21
from utils import *
from database import Archive


# Base path for the various files needed/generated by rlt_osv21.py
_BASE_PATH = os.path.dirname(os.path.abspath(__file__))

# Files
## Wunderground Configuration
CONFIG_FILE = os.path.join(_BASE_PATH, 'rtl_osv21.config')
## Temporary data file
RTL_DATA_FILE = os.path.join(_BASE_PATH, 'rtlsdr_433MHz.dat')


def record433MHzData(filename, duration, rtlsdrPath=None, useTimeout=False):
	"""
	Call the "rtl_sdr" program to record data at 433.8 MHz for the specified 
	duration in second to the specified filename.  
	
	Keywords accepted are:
	  * 'rtlsdrPath' to specify the full path of the executable and 
	  * 'useTimeout' for whether or not to wrap the "rtl_sdr" call with 
	    "timeout".  This feature is useful on some systems, such as the 
	    Raspberry Pi, where the "rtl_sdr" hangs after recording data.
	"""
	
	# Setup the arguments for the call
	frequency = 433.8e6
	sampleRate = 1e6
	samplesToRecord = int(duration*sampleRate)
	
	# Setup the program
	if rtlsdrPath is None:
		cmd = "rtl_sdr"
	else:
		cmd = rtlsdrPath
	cmd = "%s -f %i -s %i -n %i %s" % (cmd, frequency, sampleRate, samplesToRecord, filename)
	if useTimeout:
		timeoutPeriod = duration + 10
		cmd = "timeout -s 9 %i %s" % (timeoutPeriod, cmd)
		
	# Call
	os.system(cmd)
	
	# Done
	return True


def main(args):
	# Read in the configuration file
	config = loadConfig()
	
	# Record some data
	record433MHzData(RTL_DATA_FILE, config['duration'], rtlsdrPath=config['rtlsdr'], useTimeout=config['useTimeout'])
	
	# Find the bits in the freshly recorded data and remove the file
	fh = open(RTL_DATA_FILE, 'rb')
	bits = readRTLFile(fh)
	fh.close()

	if not config['retainData']:
		try:	
			os.unlink(RTL_DATA_FILE)
		except Exception, e:
			print "ERROR: cannot remove data file; %s" % str(e)
			
	# Read in the most recent state
	db = Archive()
	tLast, output = db.getData()
	
	# Find the packets and save the output
	i = 0
	while i < len(bits)-32:
		## Check for a valid preamble (and its logical negation counterpart)
		if sum(bits[i:i+32:2]) == 16 and sum(bits[i+1:i+1+32:2]) == 0:
			packet1 = bits[i+0::2]
			packet2 = bits[i+1::2]
			
			try:
				valid, sensorName, channel, sensorData = parsePacketv21(packet1, verbose=True)
				if not valid:
					valid, sensorName, channel, sensorData = parsePacketv21(packet2, verbose=True)
					
				if valid:
					if sensorName in ('BHTR968', 'THGR268', 'THGR968'):
						sensorData['dewpoint'] = computeDewPoint(sensorData['temperature'], sensorData['humidity'])
					if sensorName in ('BHTR968',):
						sensorData['pressure'] = computeSeaLevelPressure(sensorData['pressure'], config['elevation'])
					if sensorName == 'BHTR968':
						sensorData['indoorTemperature'] = sensorData['temperature']
						del sensorData['temperature']
						sensorData['indoorHumidity'] = sensorData['humidity']
						del sensorData['humidity']
						sensorData['indoorDewpoint'] = sensorData['dewpoint']
						del sensorData['dewpoint']
						
					for key in sensorData.keys():
						if key in ('temperature', 'humidity', 'dewpoint'):
							if sensorName == 'THGR968':
								output[key] = sensorData[key]
							else:
								try:
									output['alt%s' % key.capitalize()][channel-1] = sensorData[key]
								except KeyError:
									output['alt%s' % key.capitalize()] = [None, None, None, None]
									output['alt%s' % key.capitalize()][channel-1] = sensorData[key]
						else:
							output[key] = sensorData[key]
							
			except IndexError:
				pass
		i += 1
		
	# Compute combined quantities
	if 'temperature' in output.keys() and 'average' in output.keys():
		output['windchill'] = computeWindchill(output['temperature'], output['average'])
		
	# Report
	if 'indoorTemperature' in output.keys():
		print "Indoor Conditions:"
		print " -> %.1f F with %i%% humidity (%s)" % (temp_C2F(output['indoorTemperature']), output['indoorHumidity'], output['comfortLevel'])
		print " -> dew point is %.1f F" % (temp_C2F(output['indoorDewpoint']),)
		print " -> barometric pressure is %.2f in-Hg" % pressure_mb2inHg(output['pressure'])
		print " "
	
	if 'temperature' in output.keys():
		print "Outdoor Conditions:"
		print " -> %.1f F with %i%% humidity" % (temp_C2F(output['temperature']), output['humidity'])
		print " -> dew point is %.1f F" % (temp_C2F(output['dewpoint']),)
		if 'windchill' in output.keys():
			print " -> windchill is %.1f F" % (temp_C2F(output['windchill']),)
		if 'altTemperature' in output.keys():
			for i in xrange(4):
				if output['altTemperature'][i] is not None:
					t, h, d = output['altTemperature'][i], output['altHumidity'][i], output['altDewpoint'][i]
					print "    #%i: %.1f F with %i%% humidity" % (i+1, temp_C2F(t), h)
					print "         dew point is %.1f F" % (temp_C2F(d),)
		print " "
		
	if 'rainrate' in output.keys():
		print "Rainfall:"
		print " -> %.2f in/hr, %.2f in total" % (length_mm2in(output['rainrate']), length_mm2in(output['rainfall']))
		print " "
		
	if 'average' in output.keys():
		print "Wind:"
		print "-> average %.1f mph @ %i degrees" % (speed_ms2mph(output['average']), output['direction'])
		print "-> gust %.1f mph" % speed_ms2mph(output['gust'])
		print " "
	
	if 'forecast' in output.keys():
		print "Forecast:"
		print " -> %s" % output['forecast']
		print " "
		
	# Save to the database
	db.writeData(time.time(), output)
	
	# Uplodd
	wxUploader(config['ID'], config['PASSWORD'], output, archive=db, 
				includeIndoor=config['includeIndoor'], verbose=config['verbose'])


if __name__ == "__main__":
	main(sys.argv[1:])
